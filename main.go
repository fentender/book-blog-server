/*
 * Book Blog API
 *
 * This is a blog about books.
 *
 * API version: 0.0.7
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"github.com/boltdb/bolt"
	sw "github.com/fentender/book-blog-server/go"
	"log"
	"net/http"
	"os"
)

//读取文件内容至数据库
func readFile(db *bolt.DB) {
	file, _ := os.Open("book.txt")
	defer file.Close()
	// An anonymous function declaration to avoid repeating main()
	ScanCSV := func(data []byte, atEOF bool) (advance int, token []byte, err error) {
		commaidx := bytes.IndexByte(data, '&')
		if commaidx > 0 {
			// we need to return the next position
			buffer := data[:commaidx]
			return commaidx + 1, bytes.TrimSpace(buffer), nil
		}

		// if we are at the end of the string, just return the entire buffer
		if atEOF {
			// but only do that when there is some data. If not, this might mean
			// that we've reached the end of our input CSV string
			if len(data) > 0 {
				return len(data), bytes.TrimSpace(data), nil
			}
		}
		// when 0, nil, nil is returned, this is a signal to the interface to read
		// more data in from the input reader. In this case, this input is our
		// string reader and this pretty much will never occur.
		return 0, nil, nil
	}

	scanner := bufio.NewScanner(file)
	scanner.Split(ScanCSV)

	var Content, Autor string
	scanner.Scan()
	Autor = scanner.Text()
	scanner.Scan()
	Content = scanner.Text()
	sw.DbCreateReview(db, 9, Content, Autor)
	//sw.DelBook(db, 7)
}

func serve() {
	log.Printf("Server started")

	router := sw.NewRouter()

	log.Fatal(http.ListenAndServe(":8080", router))
}

func main() {
	/*
		db, err := bolt.Open("./database/bookblog.db", 0600, nil)
		if err != nil {
			log.Fatal(err)
		}
		defer db.Close()
	*/
	serve()
	fmt.Println("完成")
}
