/*
 * Book Blog API
 *
 * This is a blog about books.
 *
 * API version: 0.0.7
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"github.com/boltdb/bolt"
	"github.com/dgrijalva/jwt-go"
	"github.com/dgrijalva/jwt-go/request"
	"log"
	"net/http"
	"time"
)

const (
	//SecretKey 用于加密的token密匙
	SecretKey = "The book Blog of Fentende"
)

//SignIn 验证请求中的账号数据并发放token
func SignIn(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "x-requested-with,content-type")

	var user User

	user.Username = r.URL.Query()["Username"][0]
	user.Password = r.URL.Query()["Password"][0]

	if user.Username == "" || user.Password == "" {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte("Error in request"))
		return
	}

	db, err := bolt.Open("./database/bookblog.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	expectedUser := DbGetUser(db, user.Username)
	if expectedUser.Password != user.Password {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte("Invalid credentials"))
		return
	}

	token := jwt.New(jwt.SigningMethodHS256)
	claims := make(jwt.MapClaims)
	claims["exp"] = time.Now().Add(time.Hour * time.Duration(1)).Unix()
	claims["iat"] = time.Now().Unix()
	token.Claims = claims

	if err != nil {
		w.Write([]byte("Error extracting the key"))
		w.WriteHeader(http.StatusInternalServerError)
	}

	tokenString, err := token.SignedString([]byte(SecretKey))
	if err != nil {
		w.Write([]byte("Error while signing the token"))
		w.WriteHeader(http.StatusInternalServerError)
	}

	DbCreateToken(db, user.Username, tokenString)

	json, err := json.Marshal(Token{tokenString})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(json)
}

//SignOut 退出登录，并根据请求头中的token删除数据库中对应数据
func SignOut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "x-requested-with,content-type")

	token, err := request.ParseFromRequest(r, request.AuthorizationHeaderExtractor,
		func(token *jwt.Token) (interface{}, error) {
			return []byte(SecretKey), nil
		})

	db, err := bolt.Open("./database/bookblog.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	if err == nil {
		if token.Valid {
			tokenString, _ := token.SignedString([]byte(SecretKey))
			DbDelToken(db, string(DbKeyofToken(db, tokenString)))
			log.Println("Sign out successful")
		} else {
			w.WriteHeader(http.StatusUnauthorized)
			w.Write([]byte("Token is not valid"))
		}
	} else {
		w.WriteHeader(http.StatusUnauthorized)
		w.Write([]byte("Unauthorized access to this resource"))
	}

	w.WriteHeader(204)
}

//SignUp 根据请求的数据注册账号，并发放token
func SignUp(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "PUT,POST,GET,DELETE,OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "x-requested-with,content-type")

	var user User

	err := json.NewDecoder(r.Body).Decode(&user)

	if err != nil {
		w.WriteHeader(http.StatusForbidden)
		w.Write([]byte("Error in request"))
		return
	}

	db, err := bolt.Open("./database/bookblog.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()
	DbCreateUser(db, user.Username, user.Password)

	token := jwt.New(jwt.SigningMethodHS256)
	claims := make(jwt.MapClaims)
	claims["exp"] = time.Now().Add(time.Hour * time.Duration(1)).Unix()
	claims["iat"] = time.Now().Unix()
	token.Claims = claims

	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte("Error extracting the key"))
	}

	tokenString, err := token.SignedString([]byte(SecretKey))
	if err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		w.Write([]byte("Error while signing the token"))
	}

	DbCreateToken(db, user.Username, tokenString)

	json, err := json.Marshal(Token{tokenString})
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(201)
	w.Write(json)
}
