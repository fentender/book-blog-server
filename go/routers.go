/*
 * Book Blog API
 *
 * This is a blog about books.
 *
 * API version: 0.0.7
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"fmt"
	"github.com/gorilla/mux"
	"github.com/urfave/negroni"
	"net/http"
	"strings"
)

type Route struct {
	Name          string
	Method        string
	Pattern       string
	HandlerFunc   http.HandlerFunc
	requiredToken bool
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		//根据属性requiredToken判断是否需要使用中间件验证token
		if route.requiredToken {
			router.Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(negroni.New(negroni.HandlerFunc(authorizedValid), negroni.Wrap(handler)))
		} else {
			router.
				Methods(route.Method).
				Path(route.Pattern).
				Name(route.Name).
				Handler(handler)
		}
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"OPTIONS",
		strings.ToUpper("options"),
		"/{all:[a-zA-Z0-9=\\-\\/]+}",
		Options,
		false,
	},

	Route{
		"Index",
		"GET",
		"/",
		Index,
		false,
	},

	Route{
		"GetBook",
		strings.ToUpper("Get"),
		"/books/{bookId}",
		GetBook,
		false,
	},

	Route{
		"GetBooks",
		strings.ToUpper("Get"),
		"/books",
		GetBooks,
		false,
	},

	Route{
		"GetReview",
		strings.ToUpper("Get"),
		"/reviews/{bookId}/{reviewId}",
		GetReview,
		false,
	},

	Route{
		"GetReviews",
		strings.ToUpper("Get"),
		"/reviews/{bookId}",
		GetReviews,
		false,
	},

	Route{
		"SignIn",
		strings.ToUpper("Get"),
		"/token",
		SignIn,
		false,
	},

	Route{
		"SignOut",
		strings.ToUpper("Delete"),
		"/token",
		SignOut,
		false,
	},

	Route{
		"SignUp",
		strings.ToUpper("Post"),
		"/token",
		SignUp,
		false,
	},

	Route{
		"GetUser",
		strings.ToUpper("Get"),
		"/users/{username}",
		GetUser,
		true,
	},

	Route{
		"AddBookInBookshelf",
		strings.ToUpper("Post"),
		"/users/{username}/bookshelfs/{bookshelfName}/{bookId}",
		AddBookInBookshelf,
		true,
	},

	Route{
		"CreateBookshelf",
		strings.ToUpper("Post"),
		"/users/{username}/bookshelfs",
		CreateBookshelf,
		true,
	},

	Route{
		"DeleteBookInBookshelf",
		strings.ToUpper("Delete"),
		"/users/{username}/bookshelfs/{bookshelfName}/{bookId}",
		DeleteBookInBookshelf,
		true,
	},

	Route{
		"DeleteBookshelf",
		strings.ToUpper("Delete"),
		"/users/{username}/bookshelfs/{bookshelfName}",
		DeleteBookshelf,
		true,
	},

	Route{
		"GetBookshelf",
		strings.ToUpper("Get"),
		"/users/{username}/bookshelfs/{bookshelfName}",
		GetBookshelf,
		true,
	},

	Route{
		"GetBookshelfs",
		strings.ToUpper("Get"),
		"/users/{username}/bookshelfs",
		GetBookshelfs,
		true,
	},
}
